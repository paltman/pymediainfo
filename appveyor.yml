environment:
  LINUX_IMAGE: &linux_image Ubuntu2204
  MACOS_IMAGE: &macos_image macos-monterey
  WINDOWS_IMAGE: &windows_image Visual Studio 2022
  MEDIAINFO_VERSION: 24.11
  # Python 3.13 is not available everywhere yet, see https://github.com/appveyor/ci/issues/3927
  # Because of this, we can only deploy on 3.12
  QA_PYTHON_VERSION: 3.12
  DEPLOY_TOXENV: py312
  PYPY_URL: https://downloads.python.org/pypy/pypy3.10-v7.3.13-linux64.tar.bz2
  # Work around https://github.com/tox-dev/tox/issues/1550
  PYTHONIOENCODING: utf-8
  TWINE_USERNAME: "__token__"
  TWINE_PASSWORD:
    secure: Jp2QpmAii1mmAXmotdXmPx5q679oMcRolziuu9m2pawkvOnRJtWMsI4uWiTiSbiw+HMbyyWwVpy+FiaPsHZxtM863PNNJidW1WDam4kn8EM+rznjgZfO9NSCcwZJU5jcTYCwuXo3+FnVNK5rvQ8QJ+Zu6WzH1Ysb+uJSz8e6xt7d7hoZbb9VH5bJC7tYrw+bH+TfA9juVpIYfCavozLLTDLqTcvPfJ+LXMPbiZO+oOztNsLRsviH2QAPXaLspXvCr6qUVH3A84KCdfSXCOZG0g/eYUZ6ilMLESe7DrYZrRc=
  matrix:
    - TOXENV: docs,black,flake8,isort,mypy,pylint
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: pypy3
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py39
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py310
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py311
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py312
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py313
      APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
    - TOXENV: py39
      APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
    - TOXENV: py310
      APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
    - TOXENV: py311
      APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
    - TOXENV: py312
      APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
    - TOXENV: py39
      PYTHON: "C:/Python39"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py39
      PYTHON: "C:/Python39-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py310
      PYTHON: "C:/Python310"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py310
      PYTHON: "C:/Python310-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py311
      PYTHON: "C:/Python311"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py311
      PYTHON: "C:/Python311-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py312
      PYTHON: "C:/Python312"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py312
      PYTHON: "C:/Python312-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py313
      PYTHON: "C:/Python313"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
    - TOXENV: py313
      PYTHON: "C:/Python313-x64"
      APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
for:
-
  matrix:
    only:
      - APPVEYOR_BUILD_WORKER_IMAGE: *windows_image
  install:
    - "SET PATH=%PYTHON%;%PYTHON%/Scripts;%PATH%"
    - "python --version"
    - "pip install pdm tox"
    - "pdm install --no-self"
  build_script:
    - ps: |
        IF %PYTHON:~-4% == -x64 (SET ARCH=x86_64) ELSE (SET ARCH=i386)
        pdm run build_win32_${Env:ARCH}
  test_script:
    - "tox"
  deploy_script:
    - ps: |
        If (($env:APPVEYOR_REPO_TAG -eq "true") -and ($env:TOXENV -eq $env:DEPLOY_TOXENV)) {
          pip install twine wheel
          Invoke-Expression "twine upload --skip-existing dist/*.whl"
        }
-
  matrix:
    only:
      - APPVEYOR_BUILD_WORKER_IMAGE: *macos_image
  install: |
    set -eo pipefail
    PYTHON_VERSION="$(sed -E 's/^py(3)(.*)$/\1.\2/' <<< "$TOXENV")"
    source "${HOME}/venv${PYTHON_VERSION}/bin/activate"
    pip install pdm tox
    pdm install --no-self
  build_script: |
    pdm run build_darwin
    # Required for tests to pass with tox
    cp src/pymediainfo/libmediainfo.0.dylib /usr/local/lib/
  test_script:
    - "tox"
  deploy_script: |
    set -eo pipefail
    if [[ $APPVEYOR_REPO_TAG == "true" && $TOXENV == $DEPLOY_TOXENV ]]; then
      pip install twine wheel
      twine upload --skip-existing dist/*.whl
    fi
-
  matrix:
    only:
      - APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
      - TOXENV: /^py.*/
  install: |
    if [[ $TOXENV == pypy3 ]]; then
      pushd /tmp
      curl -sS "$PYPY_URL" | tar xj
      PATH="$(pwd)/$(basename "$PYPY_URL" | sed -E 's/\.tar\.[^.]+$//')/bin/:$PATH"
      python -m ensurepip
      popd
    else
      PYTHON_VERSION="$(sed -E 's/^py(3)(.*)$/\1.\2/' <<< "$TOXENV")"
      source "${HOME}/venv${PYTHON_VERSION}/bin/activate"
    fi
    # "python -m pip" will work with the unpacked PyPy too, "pip" won't
    python -m pip install pdm tox
    pdm install --no-self
  build_script: |
    # wheel for arm64
    pdm run build_linux_arm64
    # wheel for x86_64
    pdm run build_linux_x86_64

  test_script: |
    # Use the previously downloaded library
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:x86_64/lib/"
    # We want to see the progression of the tests so we can't run
    # tox environments in parallel
    tox
  deploy_script: |
    set -eo pipefail
    if [[ $APPVEYOR_REPO_TAG == "true" && $TOXENV == $DEPLOY_TOXENV ]]; then
      pip install twine
      pdm run clean_library
      pdm build
      twine upload --skip-existing dist/*.gz dist/*.whl
    fi
-
  matrix:
    only:
      - APPVEYOR_BUILD_WORKER_IMAGE: *linux_image
      - TOXENV: /docs.*/
  install: |
    set -eo pipefail
    source "${HOME}/venv${QA_PYTHON_VERSION}/bin/activate"
    pip install tox
  build: off
  test_script: |
    TOX_PARALLEL_NO_SPINNER=1 tox -p
